# JOINs Statement

Juntar tabelas com coesão entre os registros
- SELECT e.Fname, e.Lname, d.Dname FROM employee e JOIN departament d;
- SELECT pt.name, p.product_cd, p.name FROM product p CROSS JOIN product_type pt;

Faltou a condição de Junção
- SELECT e.Fname, e.Lname, d.Dname FROM employee e JOIN departament d ON e.dept_id = d.dept_id;

# INNER JOIN 
- Mias comum dos JOINs 
- Linhas não correspondentes excluídas
- Atribuição de junção

- SELECT < atributes > FROM < tables > INNER JOIN <table> ON <atributos de junção>

# JOIN com 3 tabelas ou mais

- SELECT a.account_id, c.fed_id, e.fname, e.lname
- FROM account a INNER JOIN custer custer c
- ON a.custe_id = c.cust_id
- INNER JOIN employee e
- ON a.open_emp_id = e.emp_id
- WHERE c.cust_type_cd = 'B';

- Com 3 tabelas, temos 2 JOINs


# Subqueries com JOIN Statement

- SELECT a.account_id, c.fed_id, e.fname, e.lname
- FROM account a INNER JOIN
- (SELECT emp_id, assigned_branch_id
- FROM employee
- WHERE start_date<'2007-01-01' AND(title='Teller' OR title = 'Head Teller'))
- e
- ON a.open_emp_id=e.emp_id
- INNER JOIN
-(SELECT branch_id
- FROM branch
- WHERE name='Woburn Branch')b
- ON e.assigned_branch_id=b.branch_id;

# SELF JOIN
Usar a mesma tabela dusa vezes em um JOIN

# OUTER JOIN

- Linhas sem correspondencias não eram exibidas
- Valores de ambas tabelas

# Quando usar cada JOIN
- INNER JOIN é a interseção entre as tabelas
- FULL JOIN / OUTER JOIN é a união entre as tabelas
- LEFT JOIN é a união da tabela A e a interseção com a B
- RIGTH JOIN é a união da tabela B e a interseção com a A
- ANTI LEFT JOIN é o uso de apenas o que tem na tabela A excluindo a interseção
- ANTI RIGTH JOIN é o uso de apenas o que tem na tabela B excluindo a interseção
- ANTI OUTER JOIN exclui o que está na interseção entre A e B

